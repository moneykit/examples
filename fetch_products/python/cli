#!/usr/bin/env python

"""A set of CLI commands to fetch product data from a link that has already been created.
"""

import functools
import logging
import os
from datetime import date, datetime, timedelta

import moneykit
import typer
from dotenv import load_dotenv
from rich import print

load_dotenv()

cli = typer.Typer()
logger = logging.getLogger("example.cli")

MONEYKIT_URL = os.environ["MONEYKIT_URL"]
CLIENT_ID = os.environ["MONEYKIT_CLIENT_ID"]
CLIENT_SECRET = os.environ["MONEYKIT_CLIENT_SECRET"]


@functools.lru_cache
def moneykit_client() -> moneykit.ApiClient:
    """Generates a Bearer token from your client id and secret to access MoneyKit.

    This bearer token will expire. This method does not show regenerating the token on/before expiry for simplicity.

    :returns: An authenticated client
    """
    # Generate a bearer access token that is valid for 60 minutes.
    # This client _should_ be cached to avoid regenerating a token on every request.
    # The bearer token should be regenerated before expiry or after a `api_error.auth.expired_access_token` error code
    # is returned by a request.

    config = moneykit.Configuration(host=MONEYKIT_URL)
    api_client = moneykit.ApiClient(config)

    logger.debug(f"Authenticating to {MONEYKIT_URL} as {CLIENT_ID}")
    access_token_api = moneykit.AccessTokenApi(api_client)
    response = access_token_api.create_access_token(
        client_id=CLIENT_ID,
        client_secret=CLIENT_SECRET,
        grant_type="client_credentials",
    )

    logger.debug(f"Token will expire in {response.expires_in} seconds")
    api_client.configuration.access_token = response.access_token
    return api_client


@cli.command()
def refresh(product: moneykit.Product, link_id: str) -> None:
    """Request a refresh of a specific product on a link

    This can be followed up with the `state` command to track when it completes (or a webhook).
    """
    products_api = moneykit.ProductsApi(moneykit_client())
    products_api.refresh_products(
        link_id,
        moneykit.RefreshProductsRequest(products=[product]),
    )

    print("Refresh requested")


@cli.command()
def state(link_id: str) -> None:
    """Print the state of each product showing when it was last refreshed."""
    links_api = moneykit.LinksApi(moneykit_client())
    response = links_api.get_link(link_id)

    print("Products: ", response.products)


@cli.command()
def disconnect(link_id: str) -> None:
    """Disconnect a link."""
    links_api = moneykit.LinksApi(moneykit_client())
    links_api.disconnect(link_id)

    print(f"Disconnected {link_id}")


@cli.command()
def get_accounts(link_id: str) -> None:
    """Print all accounts on a link."""
    accounts_api = moneykit.AccountsApi(moneykit_client())
    response = accounts_api.get_accounts(link_id)

    print("Accounts:", response.accounts)


@cli.command()
def get_account_numbers(link_id: str) -> None:
    """Print all accounts numbers on a link."""
    accounts_api = moneykit.AccountsApi(moneykit_client())
    response = accounts_api.get_account_numbers(link_id)

    print("Accounts:", response.accounts)


@cli.command()
def get_identity(link_id: str) -> None:
    """Print ownership information of accounts on a link."""
    identity_api = moneykit.IdentityApi(moneykit_client())
    response = identity_api.get_identities(link_id)

    print("Identities:", response.accounts)


@cli.command()
def get_transactions(
    link_id: str,
    start_date: str = typer.Option(default=date.today() - timedelta(days=30)),
    end_date: str = typer.Option(date.today()),
) -> None:
    """Print all transactions on a link within a date range."""
    if isinstance(start_date, str):
        start_date = datetime.strptime(start_date, "%Y-%m-%d").date()
    if isinstance(end_date, str):
        end_date = datetime.strptime(end_date, "%Y-%m-%d").date()

    transactions_api = moneykit.TransactionsApi(moneykit_client())
    response = transactions_api.get_transactions(
        link_id,
        start_date=start_date,
        end_date=end_date,
    )
    print(f"Total transactions: {response.total}")
    print(f"Transactions (page {response.page}):", response.transactions)

    transactions_count = len(response.transactions)
    while transactions_count < response.total:
        response = transactions_api.get_transactions(
            link_id,
            start_date=start_date,
            end_date=end_date,
            page=response.page + 1,
        )
        transactions_count += len(response.transactions)
        print(f"Transactions (page {response.page}):", response.transactions)


@cli.command()
def get_transactions_diff(
    link_id: str,
    cursor: str = typer.Option(default=None),
) -> None:
    """Print the change in transactions since <cursor> if no cursor is given, all transactions are printed."""
    transactions_api = moneykit.TransactionsApi(moneykit_client())

    has_more = True
    while has_more:
        # We must consume until `has_more` is False
        response = transactions_api.get_transactions_diff(link_id, cursor=cursor)
        has_more = response.has_more
        cursor = response.cursor.next
        print("Transactions diff:", response.transactions)

    print(f"Final cursor: {response.cursor.next}")


def run() -> None:
    cli()


if __name__ == "__main__":
    run()
